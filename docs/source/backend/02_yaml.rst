Задача #2: Чтение YAML
======================

Структура
---------

У проекта планируется следующая структура::

    Assets/
        Player/
            [Hobbies|Phobias|Health|Profession|Info|Baggage].yml
        Global/
            [World|Equipment|Rooms].yml
        Actions.yml
        Events.yml
    Bulker.exe

В данной задаче будет рассмотрено чтение всех YAML скриптов проекта - в частности, чтение характеристик игрока (*traits*), условий мира (*conditions*), карт событий (*event cards*) и карт действий (*action cards*).

В C# отсутствует встроенный YAML-десериализатор (т.е. конвертатор из скрипта в объект C#), но можно использовать общедоступную библиотеку **YamlDotNet**.

Это задание, вполне вероятно, станет самым трудоёмким ввиду того, что оно по сути делится на 4 части (хоть и наследующие одну и ту же логику).

1. Характеристики игрока
------------------------

Алгоритм
~~~~~~~~

Предположим, у пользователя лежат следующие кастомные черты (и в одном файле):

.. code-block:: yaml

    hobbies:
        name: 'Хобби'
        type: ValueOnly
        traits:
            - 'Психология и тренинги'
            - 'Настольные игры'
            - 'Первая помощь'

    phobias:
        name: 'Фобии'
        type: ValueTooltip
        traits:
            - value: 'Агиофобия'
              tooltip: 'Боязнь священных предметов или священника'
            - value: 'Афобофобия'
              tooltip: 'Cтрах, что у тебя нет никаких фобий'

Здесь представлены два типа записей, которые необходимо реализовать: ``ValueOnly`` и ``ValueTooltip``. Как ни трудно догадаться, в первом типе детальных описаний для каждой строки нет, а во втором есть.

Ниже представлена идея алгоритма:

.. code-block:: csharp

    // Определение

    interface ITrait
    {
        public string Name { get; set; }
        public (string Value, string Tooltip) Extract();
    }

    class TraitValueOnly : ITrait
    {
        public string Name { get; set; }
        public List<string> Traits { get; set; }
        public (string Value, string Tooltip) Extract();
    }

    class TraitValueTooltip : ITrait
    {
        public string Name { get; set; }
        public List<(string Value, string Tooltip)> Traits { get; set; }
        public (string Value, string Tooltip) Extract();
    }

    // Инициализация PlayerService: составляем словарь всех характеристик (который будет полем данных для сервиса). Ключ здесь кодовое имя черты.

    Dictionary<string, ITrait> traits = new Dictionary<string, ITrait>();

    // Тут самое интересное: чтение всех YAML-файлов, добавление всех характеристик...

    // Конечный результат

    traits = {
        ["hobbies"] = {
            Name = "Хобби",
            Traits = {
                "Психология и тренинги",
                "Настольные игры",
                "Первая помощь"
            }
        },
        ["phobias"] = {
            Name = "Фобии",
            Traits = {
                ("Агиофобия", "Боязнь священных предметов или священника"),
                ("Афобофобия", "Страх, что у тебя нет никаких фобий")
            }
        }
    };

    // Новое поле данных игрока

    record Player
    {
        // ...
        public Dictionary<string, (string Value, string Tooltip)> traits;
    }

    // Пример инициализации игрока

    Player dima = new Player("Dima");
    dima.traits["hobbies"] = traits["hobbies"].Extract(); // ("Настольные игры", "")
    dima.traits["phobias"] = traits["phobias"].Extract(); // ("Агиофобия", "Боязнь священных предметов или священника")

Вкратце, логика такова:

#. ``PlayerService`` при своей инициализации читает все YAML скрипты, находящиеся по директории `./Assets/Player/` *(и глубже)*.
#. Выходит хэш-таблица из всех пользовательских характеристик.
#. В модели игрока сервисом инициализируются все характеристики. Перебираются все пары "ключ/значение" в словаре в цикле.

.. note::
    К сожалению, с данными YAML скриптами придётся реализовать более сложное *потоковое чтение*. Кроме него, у библиотеки есть встроенный *объектный десериализатор*, который можно использовать в менее комплексных случаях.

Задание
~~~~~~~

#. Реализовать потоковое чтение YAML скрипта. В качестве базы можно использовать пример выше.
    * Топовый уровень всегда кодовое название, которое выступает ключом в словаре ``traits``.
    * Обязательным полем является ``name``, выступающее как удобноваримое название.
    * По ``type`` определяется, какая форма записи перед нами.
        * Если это ``ValueOnly``, инициализируем объект ``TraitValueOnly`` и читаем в ``traits`` массив строк (``YamlScalarNode``).
        * Если это ``ValueTooltip``, инициализируем объект ``TraitValueTooltip`` и читаем в ``traits`` массив объектов "значение/описание" (``YamlMappingNode``).
    * При ошибке чтение текущей записи прерывается. Запись в словарь не производится, но продолжается чтение файлов на другие черты.
#. Предоставить для фронт-энда интерфейс для чтения доступных кастомных характеристик игрока ``IList<string> GetTraits()``.
#. Реализовать *рекурсивное* чтение файлов `.yml` / `.yaml` по директории `./Assets/Player/`.
    * Папку `assets` можно держать в корневой папке проекта. При компиляции же копировать её в папку с бинарником.

2. Условия мира
---------------

TBD

3. Карты событий
----------------

TBD

4. Карты действий
-----------------

TBD

Материалы для изучения
----------------------

* `Страница репозитория <https://github.com/aaubry/YamlDotNet>`_
* `YamlDotNet Wiki: Потоковое чтение YAML <https://github.com/aaubry/YamlDotNet/wiki/Samples.LoadingAYamlStream>`_