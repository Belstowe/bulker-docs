Задача #1: Подключение SQLite3, генерация игроков, базовые CRUD-операции
========================================================================

База данных
-----------

В качестве БД решено использовать **SQLite3**. Это встраиваемая SQL-база, которая позволяет не использовать отдельный DB-клиент (например, с доступом из Docker-контейнера). Для начала отличный вариант.

Причины, почему данные хочется расположить именно в БД:

* Сохраняемость данных;
* Использование таких возможностей, как Foreign Key (отношения одного объекта к другим) и полей Related (позволяющие вывести связанные объекты).

Как установить SQLite3, есть в материалах для ознакомления.

Игроки
------

В начале игрок имеет следующие поля::

    id:
        type: string
        format: uuid
        readOnly: true
    dateCreated:
        type: string
        format: date-time
        readOnly: true
    name:
        type: string
    isAlive:
        type: boolean
    age:
        type: integer
    gender:
        type: string
        enum: [male, female]
    isFertile:
        type: boolean

CRUD
----

CRUD-операции включают в себя операции ***создания** (Create), **чтения** (Read), **обновления** (Update) и **удаления** (Delete)*.

Для создания игрока достаточно поля ``name``. Остальное генерируется сервером, либо определяется условием (``isFertile``).

Запросить информацию можно как по всем игрокам, так и по одному определённому (по его ``id``).

Удалить игрока можно, используя его ``id``.

Игрока можно обновить, указывая его ``id`` и затем обновляемые поля.

Задание
-------

#. Определить объект игрока и интерфейс взаимодействий с ним;
#. Подключить SQLite3 базу данных;
#. Написать CRUD-операции под БД.

Материалы для ознакомления
--------------------------

* `YouTube: Введение в серверную часть Blazor <https://www.youtube.com/watch?v=8DNgdphLvag/>`_
* `ExecuteCommands: Basic CRUD operations in Blazor using SQLite as the database <https://executecommands.com/crud-in-blazor-using-sqlite-entity-framework/>`_